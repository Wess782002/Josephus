import java.util.*;
import java.io.*;
import java.util.Random;

public class JosephusSim {
   private PersonNode circle;     // a PersonNode pointer that tracks first node
   private int size;              // the number of people in the circle
   private int eliminationCount;  // the number to count to for elimination       
   private PersonNode track;      // a PersonNode pointer to help with elimination

  public JosephusSim(String fileName) {
      try {
          Scanner file = new Scanner(new File(fileName));
          
          circle = null; // start empty
          size = 0;
  
          while (file.hasNext()) {
              String name = file.next();
              PersonNode newNode = new PersonNode(name);
  
              if (circle == null) {
                  // first node points to itself
                  circle = newNode;
                  newNode.next = circle;
              } else {
                  // add newNode after circle, then rotate circle pointer to newNode
                  PersonNode temp = circle;
                  // find last node (the one whose next is circle)
                  while (temp.next != circle) {
                      temp = temp.next;
                  }
                  temp.next = newNode;
                  newNode.next = circle;
              }
              size++;
          }
  
          // random elimination count between 1 and size/2 (assuming size >= 2)
          Random random = new Random();
          eliminationCount = random.nextInt(1, size / 2 + 1);
          System.out.println("=== Elimination count is " + eliminationCount + " ===");
  
      } catch (FileNotFoundException e) {
          System.out.println("Something went wrong with " + fileName);
      }
  }


   public void eliminate() {
       if (track == null) {
           track = circle;
       }
   
       for (int i = 1; i < eliminationCount - 1; i++) {
           track = track.next;
       }
       PersonNode eliminated = track.next;
       System.out.println("Eliminated: " + eliminated.name);
       track.next = eliminated.next;
   
       if (eliminated == circle) {
           circle = eliminated.next;
       }
   
       track = track.next;
   
       size--;
   }

   public boolean isOver() {
      return size == 1;
   }

   public String toString() {
      if (circle == null) {
         return "";
      }

      String result = "";

      // If there's only one person left, display the survivor
      if (isOver()) {
         result += "Last survivor: " + circle.name;
      } else {
         // If this is the first call, initialize the tracker
         if (track == null) {
            track = circle;
         }

         // Traverse and print all remaining people in the circle
         PersonNode start = track;
         int count = 1;

         do {
            result += count + "-" + track.name + " ";
            track = track.next;
            count++;
         } while (track != start);
      }

      return result;
   }
}

/*
=== Elimination count is 2 ===
1-Muhammad 2-Beza 3-Ibrar 4-Nur 5-Krystal 6-River 7-Soham 8-Leon 9-Will 10-Qiao 

Continue elimination? <press enter>

Eliminated: Beza
1-Ibrar 2-Nur 3-Krystal 4-River 5-Soham 6-Leon 7-Will 8-Qiao 9-Muhammad 

Continue elimination? <press enter>

Eliminated: Nur
1-Krystal 2-River 3-Soham 4-Leon 5-Will 6-Qiao 7-Muhammad 8-Ibrar 

Continue elimination? <press enter>

Eliminated: River
1-Soham 2-Leon 3-Will 4-Qiao 5-Muhammad 6-Ibrar 7-Krystal 

Continue elimination? <press enter>

Eliminated: Leon
1-Will 2-Qiao 3-Muhammad 4-Ibrar 5-Krystal 6-Soham 

Continue elimination? <press enter>

Eliminated: Qiao
1-Muhammad 2-Ibrar 3-Krystal 4-Soham 5-Will 

Continue elimination? <press enter>

Eliminated: Ibrar
1-Krystal 2-Soham 3-Will 4-Muhammad 

Continue elimination? <press enter>

Eliminated: Soham
1-Will 2-Muhammad 3-Krystal 

Continue elimination? <press enter>

Eliminated: Muhammad
1-Krystal 2-Will 

Continue elimination? <press enter>

Eliminated: Will
Last survivor: Krystal
*/
